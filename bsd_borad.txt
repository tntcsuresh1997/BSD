########################################################## START ###################################################################################################################################################
import customtkinter 
from customtkinter import filedialog
from tkinter import PhotoImage
from PIL import Image
from serial import *
from tkinter import ttk
import serial,time
from datetime import datetime
import tkinter as tk
from CTkMessagebox import CTkMessagebox
from serial.tools import list_ports
from CTkListbox import *
import threading,os
import datetime,serial.tools.list_ports
import pandas as pd
import openpyxl
from openpyxl.styles import PatternFill
import os,glob
from openpyxl import*

############################################################ GUI ###############################################################################################################################################

class DisplaySetting:
    def __init__(self):
        self.root = customtkinter.CTk() 
        customtkinter.set_appearance_mode("light")
        self.root.title("AAVIZA ELECTRONICS PRIVATE LIMITED")
        self.ser = serial.Serial()
        #self.x_com = serial_communications(self.root)
        self.root.geometry("720x680")
        self.root.minsize(700, 500)  # Set the minimum width to 400 and minimum height to 300

        # Set the maximum size of the window
        self.root.maxsize(1400,1000)  # Set the maximum width to 1000 and maximum height to 800


        self.path = 'D:/BSD_Finel_Data/Aaviza_Exc/Aaviza_V_0.01/Aaviza_Tool/Aaviza_Utility/logo4.png'

        self.update_image()
        self.combobox_name = ''

        icon_path = os.path.join(os.path.dirname(__file__),'D:/BSD_Finel_Data/Aaviza_Exc/Aaviza_V_0.01/Aaviza_Tool/Aaviza_Utility/logo1.ico')
        if os.path.exists(icon_path):
            self.root.iconbitmap(icon_path) 

############################################################################################################################################################################################################
        
        self.Employee_name = customtkinter.CTkButton(self.root, text="EMPLOYEE ID    :",  width=170, height=30,font=("Times New Roman", 18, "bold"),fg_color="#DB4035")
        self.Employee_name.place(x=10, y=270)
        self.Serial_name = customtkinter.CTkButton(self.root, text="SERIAL No          :", width=170, height=30,font=("Times New Roman", 18, "bold"),fg_color="#DB4035")
        self.Serial_name.place(x=10, y=310)
        self.date_name = customtkinter.CTkButton(self.root, text="DATE                   :",width=170, height=30,font=("Times New Roman", 18, "bold"),fg_color="#DB4035")
        self.date_name.place(x=10, y=350)
        self.test_module = customtkinter.CTkButton(self.root, text="TEST_MODULE :",width=170, height=10,font=("Times New Roman", 18, "bold"),fg_color="#DB4035")
        self.test_module.place(x=10, y=390)
        self.test_module_com1 = customtkinter.CTkButton(self.root, text="COM1 :",width=170, height=10,font=("Times New Roman", 18, "bold"),fg_color="#DB4035")
        self.test_module_com1.place(x=10, y=150)
        self.test_module_com2 = customtkinter.CTkButton(self.root, text="COM2 :",width=170, height=10,font=("Times New Roman", 18, "bold"),fg_color="#DB4035")
        self.test_module_com2.place(x=10, y=190)
        self.test_module_com3 = customtkinter.CTkButton(self.root, text="COM3 :",width=170, height=10,font=("Times New Roman", 18, "bold"),fg_color="#DB4035")
        self.test_module_com3.place(x=10, y=230)
        self.Employee_name1 = customtkinter.CTkEntry(self.root, placeholder_text="Enter Name")
        self.Employee_name1.place(x=200, y=270)
        self.Employee_name1.bind('<Return>', self.first_wizard_enter)
        self.Serial_number = customtkinter.CTkEntry(self.root, placeholder_text="Enter Serial No")
        self.Serial_number.place(x=200, y=310)
        self.Serial_number.bind('<Return>', self.second_wizard_enter)
        self.Date_name1 = customtkinter.CTkEntry(self.root, placeholder_text="Enter Date")
        self.Date_name1.place(x=200, y=350)

########################################################################### moudel select ####################################################################################################
        
        self.combobox_var = customtkinter.StringVar(value="BSD MODULE")
        self.combobox = customtkinter.CTkComboBox(self.root, values=["BSD MODULE"],command=self.combobox_callback, variable=self.combobox_var)
        self.combobox_var.set("SELECT")
        self.combobox.place(x=200,y=390) 

    def first_wizard_enter(self,event):
        input_text = self.Employee_name1.get()
        print(input_text)
        if input_text != " ":
            if  event.keysym == 'Return':
                self.Serial_number.delete(0, 'end')
                self.Serial_number.focus_set()
                return "break"
            
    def second_wizard_enter(self,event):
        input_text = self.Serial_number.get()
        print(input_text)
        if input_text != " ":
            if  event.keysym == 'Return':
                self.Employee_name1.config(state='normal')
                self.Employee_name1.focus_set()
    
    def copy_text(self):
        if self.Serial_number.tag_ranges(tk.SEL):
            selected_text = self.Serial_number.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.Serial_number.clipboard_clear()
            self.Serial_number.clipboard_append(selected_text)

    def paste_text(self):
        global time2
        clipboard_text = self.Serial_number.clipboard_get()
        time2 = time.perf_counter()
        print(time2)
        if time2-time <1:
            self.Serial_number.insert(tk.INSERT, clipboard_text)
 

########################################################################## date time ###################################################################################################################################
                
    def combobox_callback(self,choice): 
        self.combobox_name = self.combobox.get() 

###################################################################### logo ######################################################################################################################################   

    def update_image(self):
        self.my_image = customtkinter.CTkImage(light_image=Image.open(self.path), size=(330, 100))
        self.image_label = customtkinter.CTkLabel(self.root, image=self.my_image, text="")
        self.image_label.place(x=5, y=5)

    def change_logo_action(self):
        self.my_image = customtkinter.CTkImage(light_image=Image.open(self.path), size=(330, 100))
        self.image_label = customtkinter.CTkLabel(self.root, image=self.my_image, text="")
        self.image_label.place(x=5, y=5)

##################################################################################################################################################################################################################

class Serial_Communication(DisplaySetting):
    def __init__(self):
        super().__init__()
        self.comport_var1 = tk.StringVar()
        self.ser = serial.Serial()
        self.ser_wifi=serial.Serial()
        self.ser_ble=serial.Serial()
        self.comport_names1=[]
        self.connection_flag = False

###############################################################  ARRAYS #############################################
        self.test_point=[]
        self.test_value=[]
        self.test_unit=[]
        self.test_limits=[]
        self.test_verify=[]

########################################################### wifi Arrays and flags ###################################################
        self.Wifi_common_list = []
        self.wifi_filtered_list = []
        self.list_wifi_description = []
        self.list_wifi_val_ver = []
        self.list_wifi_pf = []

        self.list_volt_description = []
        self.list_volt_val_ver = []
        self.list_volt_pf = []
        self.list_volt_min_max = []
        self.volt_common_list = []

        self.list_ble_description=[]
        self.list_bl_val_ver=[]
        self.list_ble_pf = []
        self.ble_common_list = []
        self.ble_filtered_list = []
        self.disconnect_flag_BSD = False
        self.wifi_loop_count = 0
        self.ble_loop_count = 0

################################### Checks of Entry Feild ############################################################################################################################################################

        self.Save_serialNumber=False
        self.Save_serialName=False

        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        self.textbox = customtkinter.CTkTextbox(self.root, width=900,height=668,fg_color="#ffffff",font=("Times New Roman", 16),text_color="#000000")
        self.textbox.place(x=390, y=10)
        self.ctk_textbox_scrollbar = customtkinter.CTkScrollbar(self.root, command=self.textbox.yview)
        self.ctk_textbox_scrollbar.grid(row=0, column=1, sticky="ns")

        self.connect_button = customtkinter.CTkButton(self.root, text=" CONNECT   ", width=200, height=30,font=("Times New Roman", 18, "bold"),fg_color="#4073FF", command=lambda:[self.print_selections()])
        self.connect_button.place(x=100, y=460)
        self.start_button = customtkinter.CTkButton(self.root, text=" START-TEST ", width=200, height=30,font=("Times New Roman", 18, "bold"),fg_color="#4073FF",command=self.Send_Command_th)
        self.start_button.place(x=100, y=510)
        self.stop_button = customtkinter.CTkButton(self.root, text=" DISCONNECT ", width=200, height=30,font=("Times New Roman", 18, "bold"),fg_color="#4073FF",command=self.disconnect_action)
        self.stop_button.place(x=100, y=560)
        self.refresh_button = customtkinter.CTkButton(self.root, text=" REFRESH ", width=100, height=20,font=("Times New Roman", 18, "bold"),fg_color="#4073FF",command=self.Refresh_ports)
        self.refresh_button.place(x=10, y=115)

        self.clear_button = customtkinter.CTkButton(self.root, text=" CLEAR ", width=100, height=20,font=("Times New Roman", 18, "bold"),fg_color="#4073FF",command=self.clear)
        self.clear_button.place(x=130, y=115)

        self.root.configure(fg_color="#808080")
        self.Combobox_display()
########################################################################### COMBOBOX COMP ###############################################################################################################################

    def Combobox_display(self):
        self.combobox_comp1 = customtkinter.StringVar(value="COM1")
        self.combobox_port1 = customtkinter.CTkComboBox(self.root, values=self.get_available_comports(),command=self.com1_CallBack, variable=self.combobox_comp1)
        self.combobox_comp1.set("SELECT")
        self.combobox_port1.place(x=200,y=150)

        self.combobox_comp2 = customtkinter.StringVar(value="COM2")
        self.combobox_port2 = customtkinter.CTkComboBox(self.root, values=self.get_available_comports(),command=self.com2_CallBack, variable=self.combobox_comp2)
        self.combobox_comp2.set("SELECT")
        self.combobox_port2.place(x=200,y=190)

        self.combobox_comp3 = customtkinter.StringVar(value="COM3")
        self.combobox_port3 = customtkinter.CTkComboBox(self.root, values=self.get_available_comports(),command=self.com3_CallBack, variable=self.combobox_comp3)
        self.combobox_comp3.set("SELECT")
        self.combobox_port3.place(x=200,y=230)

    
    def combobox_callback(self,choice):
        self.combobox_name = self.combobox.get() 


    def com1_CallBack(self,choice):
        self.comport1 = self.combobox_port1.get()
        self.combobox_port1.configure(state = customtkinter.DISABLED)

    def com2_CallBack(self,choice):
        self.comport2 = self.combobox_port2.get()
        self.combobox_port2.configure(state = customtkinter.DISABLED)

    def com3_CallBack(self,choice):
        self.comport3 = self.combobox_port3.get()
        self.combobox_port3.configure(state = customtkinter.DISABLED)

    def get_available_comports(self):
        
        available_ports = list(serial.tools.list_ports.comports())
        self.port_list = [port.device for port in available_ports]
        print(self.port_list)
        return self.port_list
    
    def Refresh_ports(self):
        self.port_list  = []
        self.Combobox_display()

    
################################################################### CONNECT ####################################################################################################################################################

    def connect_action(self):
        self.comports = list_ports.comports()
        self.comports = sorted(self.comports)
        self.comport_names1=[]
        port_count = 0

        try:
            if self.comport1:
                port_count = port_count+1
                self.ser.port = f'{self.comport1}' 
                self.ser.baudrate = 115200
                self.ser.timeout = 3
                self.ser.bytesize=serial.EIGHTBITS
                self.ser.parity=serial.PARITY_NONE
                self.ser.stopbits=serial.STOPBITS_ONE
        except:
            pass
################################################# wifi comp/temp comp  ##############################################################3
        try:
            if self.comport2:
                port_count = port_count+1
                self.ser_wifi.port = f'{self.comport2}'         # as of now no need to return
                self.ser_wifi.baudrate = 115200
                self.ser_wifi.timeout = 3
                self.ser_wifi.bytesize=serial.EIGHTBITS
                self.ser_wifi.parity=serial.PARITY_NONE
                self.ser_wifi.stopbits=serial.STOPBITS_ONE 
        except:
            pass 
################################################ ble comp ##############################################################3
        try:
            if self.comport3:
                port_count = port_count+1
                self.ser_ble.port = f'{self.comport3}' 
                self.ser_ble.baudrate = 115200
                self.ser_ble.timeout = 3
                self.ser_ble.bytesize=serial.EIGHTBITS
                self.ser_ble.parity=serial.PARITY_NONE
                self.ser_ble.stopbits=serial.STOPBITS_ONE
        except:
            pass
        print("Comports",port_count)
        return  port_count
    
    def print_selections(self):
        try:
            re_com = self.connect_action()

            if re_com > 0 and re_com < 4:
                self.textbox.insert(customtkinter.END, "  PORTS STATUS      :  " + "Ports Connected" +'\n')
            else:
                CTkMessagebox(title="AAVIZA ELECTRONICS PRIVATE LIMITED", message="Ports not connected")

            self.Employee_name=self.Employee_name1.get()
            self.Name_Feild_Check(self.Employee_name)

            print("Name_status",self.Save_serialName)

            self.Serial_name = self.Serial_number.get()
            self.SerialNumber_Feild_Check(self.Serial_name)

            print("Serial_status",self.Save_serialName)

            self.now = datetime.datetime.now()
            
            self.datetime_var1 = tk.StringVar(value=self.now.strftime("%H:%M:%S"))
            self.datetime_var = tk.StringVar(value=self.now.strftime("%d-%m-%Y"))
            
            self.Start_time = self.datetime_var1.get()

            self.datetime = self.datetime_var.get()
            
            if self.Save_serialName and self.Save_serialNumber:
                self.textbox.insert(customtkinter.END, "  EMPLOYEE ID        :  "  +        self.Employee_name  + '.'+'\n')
                self.textbox.insert(customtkinter.END, "  SERIAL NO             :  "  +        self.Serial_name    + '.'+'\n')
                self.textbox.insert(customtkinter.END, "  TEST MODULE       :  "  +       self.combobox_name    + '.'+'\n')
                self.textbox.insert(customtkinter.END, "  DATE                       :  "  +        self.datetime      + '.'+'\n')
                self.textbox.insert(customtkinter.END, "  START-TIME        :  "  +        self.Start_time      + '.'+'\n')
                self.textbox.insert(customtkinter.END,"\n")
                self.connect_button.configure(state=customtkinter.DISABLED)
                self.port_open()
            else:
                self.clear_text()
                self.connect_button.configure(state=customtkinter.NORMAL)
        except:
            pass

    def port_open(self):
        try:
            self.connect_action()
            print("connect_action pass")
            
        except:
            pass
    
################################################### Enty Feild Check ##################################################################
        
    def SerialNumber_Feild_Check(self,valueSerial):
        if valueSerial == '':

            CTkMessagebox(title="Check Entry Feild",message="Invalid Serial Number")
            self.connect_button.configure(state=customtkinter.NORMAL)
            self.Save_serialNumber=False
            try:
                self.ser.close()
                self.ser_ble.close()
                self.ser_wifi.close()
            except:
                pass
        else:
            self.Save_serialNumber=True
        
    def Name_Feild_Check(self,valueName):
        
        if valueName =='':
            CTkMessagebox(title="Check Entry Feild",message="Invalid Name")
            self.connect_button.configure(state=customtkinter.NORMAL)
            self.Save_serialName=False
            try:
                self.ser.close()
                self.ser_ble.close()
                self.ser_wifi.close()
            except:
                pass
        else:
            self.Save_serialName=True

   
################################ Define ble function cases start  ################################################################################################
    def ble_bCC_test(self):
        list_display = '******************************* Bluetooth Test Start *******************************'
        self.textbox.insert(customtkinter.END,list_display)
        self.textbox.insert(customtkinter.END,'\n')
        bool_state = self.Ble_flash_exit_popUp()
        
        print(bool_state)
        if bool_state == True:
            print('kkkkkkk')
            time.sleep(2)

            try:
                self.ser_ble.open()
                time.sleep(1)
                if self.ser_ble.is_open:
                    try:
                        print(f"Sending command ble: bCC")
                        self.ser_ble.write('bCC\r'.encode('utf-8'))
                        ble_flag_result=self.Ble_Data()                  

                        if ble_flag_result:
                            self.ble_selected_case = 'case_bcc'
                            self.ble_loop_count = self.ble_loop_count + 1
                            if self.ble_loop_count == 3:
                                self.MisMatch_WB_In_Comm()
                        else:
                            self.ble_loop_count = 0
                            self.ble_selected_case = 'case_bbz'
                    except:
                        pass
            except SerialException:
                self.BSD_Time_Out()

    def ble_bBZ_test(self):
        try:
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                    try:
                        print(f"Sending command ble: bBZ")
                        self.ser_ble.write('bBZ\r'.encode('utf-8'))
                        ble_flag_result=self.Ble_Data()

                        if ble_flag_result:
                            self.ble_selected_case = 'case_bbz'
                            self.ble_loop_count = self.ble_loop_count + 1
                            if self.ble_loop_count == 3:
                                self.MisMatch_WB_In_Comm()
                        else:
                            self.ble_loop_count = 0
                            self.ble_selected_case = 'case_bs1'
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

    def ble_bS1_test(self):
        try:
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                    try:
                        print(f"Sending command ble: bS1")
                        self.Pop_Up()
                        self.ser_ble.write('bS1\r'.encode('utf-8'))
                        ble_flag_result=self.Ble_Data()

                        if ble_flag_result:
                            self.ble_selected_case = 'case_bs1'
                            self.ble_loop_count = self.ble_loop_count + 1
                            if self.ble_loop_count == 3:
                                self.MisMatch_WB_In_Comm()
                        else:
                            self.ble_loop_count = 0
                            self.ble_selected_case = 'case_bs2'

                    except :
                        pass
        except SerialException:
            self.BSD_Time_Out()

    def ble_bS2_test(self):
        print('check--b2')
        try:
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                try:
                    print(f"Sending command ble: bS2")
                    self.Pop_Up()
                    self.ser_ble.write('bS2\r'.encode('utf-8'))
                    ble_flag_result=self.Ble_Data()

                    if ble_flag_result:
                        self.ble_selected_case = 'case_bs2'
                        self.ble_loop_count = self.ble_loop_count + 1
                        if self.ble_loop_count == 3:
                            self.MisMatch_WB_In_Comm()
                    else:
                        self.ble_loop_count = 0
                        self.ble_selected_case = 'case_bs3'
                except:
                    pass
        except SerialException as e:
            print(e)
            self.BSD_Time_Out()

    def ble_bS3_test(self):
        try:
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                    try:
                        print(f"Sending command ble: bS3")
                        self.Pop_Up()
                        self.ser_ble.write('bS3\r'.encode('utf-8'))
                        ble_flag_result=self.Ble_Data()

                        if ble_flag_result:
                            self.ble_selected_case = 'case_bs3'
                            self.ble_loop_count = self.ble_loop_count + 1
                            if self.ble_loop_count == 3:
                                self.MisMatch_WB_In_Comm()
                        else:
                            self.ble_loop_count = 0
                            self.ble_selected_case = 'case_bls'
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()
       
    def ble_bLS_test(self):

        try:    
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                try:
                    print(f"Sending command ble: bLS")
                    self.Pop_Up_LCD1()
                    self.ser_ble.write('bLS\r'.encode('utf-8'))
                    ble_flag_result=self.Ble_Data()

                    if ble_flag_result:
                        self.ble_selected_case = 'case_bls'
                        self.ble_loop_count = self.ble_loop_count + 1
                        if self.ble_loop_count == 3:
                            self.MisMatch_WB_In_Comm()
                    else:
                        self.ble_loop_count = 0
                        self.ble_selected_case = 'case_blb'
                except:
                    pass
        except SerialException:
            self.BSD_Time_Out()    
        
    def ble_bLB_test(self):
        try:
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                try:
                    print(f"Sending command ble: bLB")
                    self.ser_ble.write('bLB\r'.encode('utf-8'))
                    self.Pop_Up_LCD2()
                    ble_flag_result=self.Ble_Data()
                    
                    if ble_flag_result:
                        self.ble_selected_case = 'case_blb'
                        self.ble_loop_count = self.ble_loop_count + 1
                        if self.ble_loop_count == 3:
                            self.MisMatch_WB_In_Comm()
                    else:
                        self.ble_loop_count = 0
                        self.ble_selected_case = 'case_bld'
                except:
                    pass
        except SerialException:
            self.BSD_Time_Out()
            

    def ble_bLD_test(self):
        try:
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                try:
                    print(f"Sending command ble: bLD")
                    self.ser_ble.write('bLD\r'.encode('utf-8'))
                    time.sleep(1)
                    self.Pop_Up_LCD3()
                    self.ble_selected_case = 'case_bcg'
                    self.ser_ble.close()
                except:
                    pass
        except SerialException:
           self.BSD_Time_Out()

    def ble_bCG_test(self):
        try:
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                try:
                    print(f"Sending command ble: bCG")
                    self.ser_ble.write('bCG\r'.encode('utf-8'))
                    ble_flag_result=self.Ble_Data()

                    if ble_flag_result:
                        self.ble_selected_case = 'case_bcg'
                        self.ble_loop_count = self.ble_loop_count + 1
                        if self.ble_loop_count == 3:
                            self.MisMatch_WB_In_Comm()
                    else:
                        self.ble_loop_count = 0
                        self.ble_selected_case = 'case_bbs'
                except:
                    pass
        except SerialException:
            self.BSD_Time_Out()

    def ble_bBS_test(self):
        try:
            self.ser_ble.open()
            time.sleep(1)
            if self.ser_ble.is_open:
                try:
                    print(f"Sending command ble: bBS")
                    self.ser_ble.write('bBS\r'.encode('utf-8'))
                    ble_flag_result=self.Ble_Data()
                    if ble_flag_result:
                        self.ble_selected_case = 'case_bbs'
                        self.ble_loop_count = self.ble_loop_count + 1
                        if self.ble_loop_count == 3:
                            self.MisMatch_WB_In_Comm()
                    else:
                        self.ble_loop_count = 0
                        self.wifi_selected_case = 'exit'
                        self.ble_run_flag = False
                        self.flash_box_flag = True
                        #self.save_flag_BSD = True
                except:
                    pass
        except SerialException:
            self.BSD_Time_Out()
        
        list_display = '******************************* Bluetooth Test End*******************************'
        self.textbox.insert(customtkinter.END,list_display)
        self.textbox.insert(customtkinter.END,'\n')

################################################# pop_up start ########################################################################################################################################333
        
    def Pop_Up(self):
        try:
            self.msg = CTkMessagebox(title="Switch  Check", message=" Press Switch for 5 Sec before clicking yes",option_1='Yes',option_2='No')
            if self.msg.get() == 'Yes':
                self.msg.destroy()
            else :
                self.msg.destroy()
        except:
            pass

    def Pop_Up_LCD1(self):   
        try:
            self.msg = CTkMessagebox(title="Confirmation", message="LCD screen Visual Check",option_1='Yes',option_2='No')
            if self.msg.get() == 'Yes':
                self.msg.destroy()
            else:
                self.msg.destroy()
        except:
            pass
    
    def Pop_Up_LCD2(self):
        try:    
            self.msg = CTkMessagebox(title="Confirmation", message=" LCD backlight Visual Check",option_1='Yes',option_2='No')
            if self.msg.get() == 'Yes':
                self.msg.destroy()
            else:
                self.msg.destroy()
        except:
            pass
        
    def Pop_Up_LCD3(self):
        try:
            self.msg = CTkMessagebox(title="Confirmation", message="LEDs Green, Blue, Red Visual Check",option_1='Yes',option_2='No')
            if self.msg.get() == 'Yes':
                self.ble_common_list.append(["PASS"])
                self.msg.destroy()
            elif self.msg.get() == 'No':
                self.ble_common_list.append(["FAIL"])
                self.msg.destroy()
        except:
            pass
    
    def Pop_Up_bWF(self):
        try:
            self.msg = CTkMessagebox(title="Confirmation", message="Check near by Devices for Wifi",option_1='Yes',option_2='No')
            if self.msg.get() == 'Yes':
                self.Wifi_common_list.append(["Wifi BroadCast PASS"])
                self.msg.destroy()

            elif self.msg.get() == 'No':
                self.Wifi_common_list.append(["Wifi BroadCast FAIL"])
                self.msg.destroy()
        except:
            pass


    def Wifi_Flash_PopUp(self):
        try:
            self.msg = CTkMessagebox(title="Confirmation", message=" Please Flash Wifi and press Reset switch before clicking Yes",option_1='Yes',option_2='No')
            if self.msg.get() == 'Yes':
                self.ser_wifi.open()
                time.sleep(1)
                self.ser_wifi.write('bBH\r'.encode('utf-8'))
                time.sleep(1)
                self.Ble_flash_entry_popUp()
                self.ser_wifi.write('bBL\r'.encode('utf-8'))
                time.sleep(1)
                self.ser_wifi.close()
                time.sleep(1)
                self.ser.write('FWIFI\r'.encode('utf-8'))
                time.sleep(1)
                self.msg.destroy()
                print("ser")
            else:
                self.ser.write('FWIFI\r'.encode('utf-8'))
                self.msg.destroy()
        except:
            pass
 
    def Ble_flash_entry_popUp(self):
        time.sleep(2) 
        try:
            self.msg = CTkMessagebox(title="Confirmation", message=" Please Flash Ble and press Reset switch before clicking Yes or Re-Flash Wifi",option_3='Re-Flash',option_1='Yes',option_2='No')
            if self.msg.get() == 'Yes':
                self.msg.destroy()

            elif self.msg.get() == 'Re-Flash':
                self.ser_wifi.close()
                time.sleep(20)
                self.Wifi_Flash_PopUp()
                self.msg.destroy()

            elif self.msg.get() == 'No':
                self.msg.destroy()
        except:
            pass

    def Ble_flash_exit_popUp(self): 
        try:
            self.msg = CTkMessagebox(title="Confirmation", message=" BLE Flash Is Completed Please Press Yes",option_1='Yes',option_2='No')
            if self.msg.get() == 'Yes':
                flag = True
                self.msg.destroy()
            else:
                flag = False
                self.msg.destroy()
            return flag
        except:
            pass
####################################################### FLASH BOX LEVEL POP_UP #########################################################################################################################################################

    def Ble_flash_pop_up(self):
        try:
            msg = CTkMessagebox(title="Information", message="Click YES After Flashing the BLE Box Level Firmware or Re-Flash", option_3='Re-Flash',option_2="YES",option_1='NO')
            if msg.get() == "YES":
                time.sleep(1)
                print('BBl')
                self.ser_wifi.write("bBL\r".encode('utf-8'))
                time.sleep(1) 
                self.ser_wifi.close()
                msg.destroy() 
            elif msg.get() == "NO" :
                msg.destroy()
            elif msg.get() == 'Re-Flash':
                self.ser_wifi.close()
                time.sleep(20)
                self.box_ble_pop_pup()
                msg.destroy()
        except:
            pass

        
    def box_ble_pop_pup(self):
        try:
            msg = CTkMessagebox(title="Information", message="Flash BLE Box Level Firmware", option_2="Flash",option_1='NO')
            if msg.get() == "Flash":
                try:
                    self.ser_wifi.open()
                    time.sleep(1)
                    print('BBh')
                    self.ser_wifi.write("bBH\r".encode('utf-8'))
                    time.sleep(1)
                    self.Ble_flash_pop_up()
                    self.box_wifi_ble_flash='box_level_flash_wifi'
                    msg.destroy()
                except:
                    pass
            elif msg.get() == "NO" :
                self.box_wifi_ble_flash='box_level_flash_wifi'
                msg.destroy()
        except:
            pass

    def wifi_flash_pop_up(self):
        try:
            msg = CTkMessagebox(title="Information", message="Click YES After Flashing Wifi Box Level Firmware", option_2="YES",option_1='NO')
            if msg.get() == "YES":
                try:
                    self.ser.write("BSBF0\r".encode('utf-8'))
                    print("in_R_off")
                    time.sleep(1)
                    self.ser.close()
                    msg.destroy()
                except:
                    pass
      
               
            elif msg.get() == "NO" :
                msg.destroy()

        except:
            pass
        

    def box_wifi_pop_pup( self):
        try:
            msg = CTkMessagebox(title="Information", message="Flash Wifi Box Level Firmware", option_2="YES",option_1='NO')
            if msg.get() == "YES":
                    self.ser.open()
                    time.sleep(1)
                    self.ser.write("BSBF1\r".encode('utf-8'))
                    time.sleep(1)
                    self.wifi_flash_pop_up()
                    self.flash_box_flag = False
                    self.save_flag_BSD = True
                    msg.destroy()
        
            elif msg.get() == "NO" :
                    self.flash_box_flag = False
                    self.save_flag_BSD = False
                    msg.destroy()
        except:
            pass
 
################################################################################################################################################################################################################################
    
    def Time_out_POP_UP(self):
        try:
            self.msg = CTkMessagebox(title="Error", message="Connection Lost ...!", icon="cancel",option_1='Ok')
            if self.msg.get() == 'Ok':
               self.msg.destroy()
            else:
                self.msg.destroy()
        except:
            pass

#############################################   pop_up end   ########################################################################################################################

################################ Define wifi funcdtion cases #############################################################################################################################
    def Read_Dumm(self):
        try:
            self.ser_wifi.open()
            time.sleep(1)
            self.Read_Dumm_Wifi()
            self.ser_wifi.close()
            self.wifi_selected_case ='case_wcc'
        except:
            pass


    def wifi_wCC_test(self):
        
        list_display = '******************************* Wifi Test Start*******************************'
        self.textbox.insert(customtkinter.END,list_display)
        self.textbox.insert(customtkinter.END,'\n')

        try:
            self.ser_wifi.open()
            time.sleep(1)
            if self.ser_wifi.is_open:
                    try:
                        print(f"Sending command wifi: wCC")
                        pin = 'wCC\r'
                        self.ser_wifi.write(f'{pin}'.encode('utf-8'))
                        
                        wifi_flag_result=self.Wifi_Data()
                        if wifi_flag_result:
                            self.wifi_selected_case ='case_wcc'
                            self.wifi_loop_count = self.wifi_loop_count + 1
                            if self.wifi_loop_count == 3:
                                self.MisMatch_WB_In_Comm()
                        else:
                            self.wifi_loop_count = 0
                            self.wifi_selected_case = 'case_bwf'
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

    def wifi_bWF_test(self):

        try:
            self.ser_wifi.open()
            time.sleep(1)
            if self.ser_wifi.is_open:
                    try:
                        print(f"Sending command wifi: bWF")
                        pin='bWF\r'
                        self.ser_wifi.write(f'{pin}'.encode('utf-8'))
                        time.sleep(1)
                        self.Pop_Up_bWF()
                        self.ReadDummProv()
                        time.sleep(3)
                        self.wifi_selected_case = 'case_bws'
                        self.ser_wifi.close()
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

    def wifi_bWS_test(self):
        
        try:
            self.ser_wifi.open()
            time.sleep(1)
            if self.ser_wifi.is_open:
                    try:
                        print(f"Sending command wifi: bWS")
                        pin='bWS\r'
                        self.ser_wifi.write(f'{pin}'.encode('utf-8'))
                        wifi_flag_result=self.Wifi_Data()
                        if wifi_flag_result:
                            self.wifi_selected_case = 'case_bws'
                            self.wifi_loop_count = self.wifi_loop_count + 1
                            if self.wifi_loop_count == 3:
                                self.MisMatch_WB_In_Comm()
                        else:
                            self.wifi_loop_count = 0
                            self.wifi_selected_case = 'case_bbh'
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

    def wifi_bBH_test(self):
 
        try:
            self.ser_wifi.open()
            time.sleep(1)
            if self.ser_wifi.is_open:
                    try:
                        print(f"Sending command wifi: bBH")
                        pin = 'bBH\r'
                        self.ser_wifi.write(f'{pin}'.encode('utf-8'))
                        #self.Ble_flash_entry_popUp()
                        wifi_flag_result=self.Wifi_Data()
                        if wifi_flag_result:
                            self.wifi_selected_case = 'case_bbh'
                            self.wifi_loop_count = self.wifi_loop_count + 1
                            if self.wifi_loop_count == 3:
                                self.MisMatch_WB_In_Comm()
                        else:
                            self.wifi_loop_count = 0
                            self.wifi_selected_case = 'case_bbl'
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

    def wifi_bBL_test(self):

        try:
            self.ser_wifi.open()
            time.sleep(1)
            if self.ser_wifi.is_open:
                    try:
                        print(f"Sending command wifi: bBL")
                        pin = 'bBL\r'
                        self.ser_wifi.write(f'{pin}'.encode('utf-8'))
                        wifi_flag_result=self.Wifi_Data()
                        if wifi_flag_result:
                            self.wifi_selected_case = 'case_bbl'
                            self.wifi_loop_count = self.wifi_loop_count + 1
                            if self.wifi_loop_count == 3:
                                self.MisMatch_WB_In_Comm()
                        else:
                            #self.wifi_selected_case = 'exit'
                            self.wifi_loop_count = 0
                            self.wifi_run_flag = False
                            self.ble_run_flag = True
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

        list_display = '**************************************** Wifi Test End **************************************'
        self.textbox.insert(customtkinter.END,list_display)
        self.textbox.insert(customtkinter.END,'\n')

######################################## End wifi function cases #########################################################################################################

######################################## user board test function cases start#########################################################################################
        
    def Main_Volt_Chck(self):

        try:
            self.ser.open()
            time.sleep(1)
            if self.ser.is_open:
                    try:
                        list_display = '************************************ Voltage Test Start ********************************'
                        self.textbox.insert(customtkinter.END,list_display)
                        self.textbox.insert(customtkinter.END,'\n')
                        print(f"Sending command volt: BSD01")
                        pin = "BSD01\r"
                        self.ser.write(f'{pin}'.encode('utf-8'))
                        time.sleep(1)
                        self.volt_data(0,1)
                        time.sleep(1)
                        self.volt_selected_case = 'Volt_chk1'
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

    def Volt_Check1(self):

        try:
            self.ser.open()
            time.sleep(1)
            if self.ser.is_open:
                    try:
                        print(f"Sending command volt: BSD02")
                        pin = "BSD02\r"
                        self.ser.write(f'{pin}'.encode('utf-8'))
                        time.sleep(1)
                        self.volt_data(1,2)
                        time.sleep(1)
                        self.volt_selected_case = 'Volt_chk2'
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

    def Volte_Check2(self):
         
        try:
            self.ser.open()
            time.sleep(1)
            if self.ser.is_open:
                    try:
                        print(f"Sending command volt: BSD03")
                        pin = "BSD03\r"
                        self.ser.write(f'{pin}'.encode('utf-8'))
                        time.sleep(2)
                        self.volt_data(1,2)    #  i will check 
                        self.voltag_run_flag = False
                        self.wifi_run_flag = True
                        #self.ser_wifi.open()
                        list_display = '******************************* Voltage Test End *******************************'
                        self.textbox.insert(customtkinter.END,list_display)
                        self.textbox.insert(customtkinter.END,'\n')
                    except:
                        pass
        except SerialException:
            self.BSD_Time_Out()

############################################user board test  function cases end  #################################################################################################################################

######################################## Command Sending section #################################################################################################################################
    
    def Send_Command(self):
        global Event_t
        Event_t = True
        self.clear_array()
        self.start_button.configure(state=customtkinter.DISABLED)
      
        # Put in dictionary key for each command of Wifi and Ble
        self.wifi_selected_case = 'case_dumm'
        self.ble_selected_case  = 'case_bcc'
        self.volt_selected_case = 'Volt_chk_main'
        self.box_wifi_ble_flash = 'box_level_flash_ble'
        
        Volt_chk_dict ={
            'Volt_chk_main':self.Main_Volt_Chck,
            'Volt_chk1':self.Volt_Check1,
            'Volt_chk2':self.Volte_Check2,
        }

        
        wifi_cmd_dict = {
            'case_dumm':self.Read_Dumm,
            'case_wcc':self.wifi_wCC_test,
            'case_bwf':self.wifi_bWF_test,
            'case_bws':self.wifi_bWS_test,
            'case_bbh':self.wifi_bBH_test,
            'case_bbl':self.wifi_bBL_test
            }
        
        ble_cmd_dict = {
            'case_bcc':self.ble_bCC_test,
            'case_bbz':self.ble_bBZ_test,
            'case_bs1':self.ble_bS1_test,
            'case_bs2':self.ble_bS2_test,
            'case_bs3':self.ble_bS3_test,
            'case_bls':self.ble_bLS_test,
            'case_blb':self.ble_bLB_test,
            'case_bld':self.ble_bLD_test,
            'case_bcg':self.ble_bCG_test,
            'case_bbs':self.ble_bBS_test
            
        }

        box_flash = {
            'box_level_flash_ble':self.box_ble_pop_pup,
            'box_level_flash_wifi':self.box_wifi_pop_pup
        }

############################################ Command Sending section end #########################################################################

############################################ selcte test case moudel start ########################################################################################
        
        if  self.combobox_name == 'BSD MODULE'and self.Save_serialName and self.Save_serialNumber:
            self.wifi_run_flag = False
            self.ble_run_flag = False
            self.flash_box_flag = False
            self.save_flag_BSD = False
            self.voltag_run_flag = True
            self.disconnect_flag_BSD = True

            while Event_t:

                    if self.wifi_selected_case == 'exit':
                        Event_t = False

                    if self.volt_selected_case in Volt_chk_dict and self.voltag_run_flag:
                        Volt_chk_dict[self.volt_selected_case]()

                    if self.wifi_selected_case in wifi_cmd_dict and self.wifi_run_flag:
                        wifi_cmd_dict[self.wifi_selected_case]()  

                    if self.ble_selected_case in  ble_cmd_dict and self.ble_run_flag:
                        ble_cmd_dict[self.ble_selected_case]()

                    if self.box_wifi_ble_flash in  box_flash and self.flash_box_flag :
                        box_flash[self.box_wifi_ble_flash]()
                    

            if self.save_flag_BSD :
                self.Parsing_priority()
                self.Save_Data()
                self.clear_text() 

############################################# selcte test case moudel end ######################################################################################################

#############################################  BSD volt_data start         ##################################################################################################################
    
    def volt_data(self,arg,delay):
        volt_Event = True
        while volt_Event:
            time.sleep(delay)
            print(self.ser.in_waiting)
            if self.ser.in_waiting>0:
                try:
                    data_volt = self.ser.read_all().decode("utf-8").strip('\n').strip()
                    print (data_volt)
                    volt_decoded_list_a = data_volt
                    volt_decoded_list = volt_decoded_list_a.split('\n')
                    print("volt common--->",volt_decoded_list)
                    if "Flash Wifi" in volt_decoded_list:
                            self.Wifi_Flash_PopUp()


                    if "Flash Wifi" not in volt_decoded_list and "COM-END" not in volt_decoded_list :
                        self.volt_common_list.append(volt_decoded_list)
                        self.Volt_Txt(volt_decoded_list)
                    if "COM-END" in volt_decoded_list or arg == 0:
                        volt_Event = False
                        self.ser.close()
                except:
                   pass

################################################# BSD volt_data end ######################################################################################################

####################################### volt Display ###############################################################################################################################
    def Volt_Txt(self,volt_filtered):
        for values in volt_filtered:
            self.textbox.insert(customtkinter.END,values)
            self.textbox.insert(customtkinter.END,"\n")
    
####################################### ReadDummProv Common Receive data start  #################################################      
            
    def ReadDummProv(self):
        Wifi_Event = 0
        while Wifi_Event<45:
            time.sleep(0.5)
            print(self.ser_wifi.in_waiting)
            if self.ser_wifi.in_waiting>0:
                try:
                    data_wifi = self.ser_wifi.read_all().decode("utf-8").strip('\n').strip()
                    print (data_wifi)
                    
                except:
                   pass
            Wifi_Event = Wifi_Event+1

    def Read_Dumm_Wifi(self):
        Wifi_Event = 0
        while Wifi_Event<20:
            time.sleep(0.5)
            if self.ser_wifi.in_waiting>0:
                try:
                    data_wifi = self.ser_wifi.read_all().decode("utf-8").strip('\n').strip()
                    print (data_wifi)
                except:
                   pass
            Wifi_Event = Wifi_Event+1

########################################## ReadDummProv Common Receive data end ####################################################################

######################################## Wifi Common Receive data start ###################################################################

    def Wifi_Data(self):
        global WIFI_decoded_list
        Wifi_Event =  True
        count = 0
        while Wifi_Event:
            time.sleep(2)
            print(self.ser_wifi.in_waiting)
            if self.ser_wifi.in_waiting>0:
                try:
                    data_wifi = self.ser_wifi.read_all().decode("utf-8").strip('\n').strip()
                    print (data_wifi)
                    WIFI_decoded_list_a = data_wifi.replace('\x00','').replace('\r','')
                    WIFI_decoded_list = WIFI_decoded_list_a.split('\n')
                    print("Wifi common--->",WIFI_decoded_list)
                    Wifi_Event = False
                    self.ser_wifi.close()
                except:
                   pass
            else:
                count = count + 1
                print("wifi DEBUG cnt->",count)
                if count==5:
                    
                    self.ser_wifi.close()
                    Wifi_Event = False
            
        if count == 5 or 'Invalid_Cmd' in WIFI_decoded_list or'retry' in WIFI_decoded_list or 'resultsCount: -2073.' in WIFI_decoded_list or 'No ID Found.' in WIFI_decoded_list or 'UART_Init - OK' in WIFI_decoded_list:
            return True
        else:
            self.Wifi_common_list.append(WIFI_decoded_list)
            self.Wifi_Display_Txt(WIFI_decoded_list)
            return False
        
############################################## Wifi Common Receive data end  #########################################################################################################################

############################################## Wifi Display  start #####################################################################################################################################

    def Wifi_Display_Txt(self,Un_filter_DATA):
        Filtered_Data = []

        for i in Un_filter_DATA:
                x=i.replace('\x00','')
                Filtered_Data.append(x)

        for item in Filtered_Data:
            if item not in self.wifi_filtered_list:
                self.wifi_filtered_list.append(str(item))
    
        for i in self.wifi_filtered_list:
            #print("--->",i)
            self.textbox.insert(customtkinter.END,i)
            self.textbox.insert(customtkinter.END,'\n')

        self.wifi_filtered_list = []

############################################### Wifi Display  end #########################################################################

############################################### Ble  Data start ###################################################################################
    
    def Ble_Data(self):
        global BLE_decoded_list
        Ble_Event =  True
        count = 0

        while Ble_Event:
            time.sleep(2)
            print(self.ser_ble.in_waiting)
            if self.ser_ble.in_waiting>0:
                try:
                    data_ble = self.ser_ble.read(self.ser_ble.in_waiting).decode("utf-8").strip()
                    BLE_decoded_list_a = data_ble.replace('\x00','').replace('\r','')
                    BLE_decoded_list = BLE_decoded_list_a.split('\n')
                    print("BLE----->",BLE_decoded_list)
                    Ble_Event = False
                    self.ser_ble.close()
                except:
                    pass
            else:
                count = count + 1
                print("ble DEBUG cnt->",count)
                if count==5:
                    
                    self.ser_ble.close()
                    Ble_Event = False

        if  count == 5 or 'Invalid_Cmd' in BLE_decoded_list or'retry' in BLE_decoded_list or 'resultsCount: -2073.' in BLE_decoded_list or 'No ID Found.' in BLE_decoded_list:
            return True
        else:
            self.ble_common_list.append(BLE_decoded_list)
            self.Ble_Display_Txt(BLE_decoded_list)
            return False 
        
########################################### Ble Data end ################################################################################################################################

########################################## Ble display start #########################################################################################################################################              
    
    def Ble_Display_Txt(self,Un_filter_DATA):
        Filtered_Data = []

        for i in Un_filter_DATA:
            if i!='\x00Invalid_Cmd\r' and i!='\x00Start\r':
                x=i.replace('\x00','')
                Filtered_Data.append(x)

        for item in Filtered_Data:
            if item not in self.ble_filtered_list:
                self.ble_filtered_list.append(str(item))
    
        for i in self.ble_filtered_list:
            #print("--->",i)
            self.textbox.insert(customtkinter.END,i)
            self.textbox.insert(customtkinter.END,'\n')

        self.ble_filtered_list = []

############################################## Ble display end #############################################################################################3

##############################################  resive data Parsing_priority start  ############################################################################################################################################ 
    
    def Parsing_priority(self):
            
            self.Parsing_Module(1)  # BS voltage parsing
            time.sleep(0.5)
            self.Parsing_Module(2) # BS Wifi
            time.sleep(0.5)
            self.Parsing_Module(3) # BS ble

    def Parsing_Module(self,arg):

        if arg == 1:
            result_dict = {f'Key_{i}': sublist for i, sublist in enumerate(self.volt_common_list)}
            for i,x in result_dict.items():
                if i == 'Key_0':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_1':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_2':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_3':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_4':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_5':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_6':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_7':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_8':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])
                elif i == 'Key_9':
                    dummy_d = x[0].split(':')
                    self.list_volt_description.append(dummy_d[0])
                    self.list_volt_val_ver.append(dummy_d[1])
                    self.list_volt_pf.append(x[2])
                    self.list_volt_min_max.append(x[1])

################################################## vlot resive data Parsing_Module end #######################################################################################

##################################################wifi  resive data Parsing_Module start ####################################################################################################
        
        if arg == 2:
            for i in range (len(self.Wifi_common_list)):
                for item in self.Wifi_common_list[i]:
                    if item.startswith("Wifi Firmware Version"):
                        wifi_split = item.split(':')
                        check = wifi_split[1].strip().replace('.','')
                        self.list_wifi_description.append(wifi_split[0])
                        self.list_wifi_val_ver.append(wifi_split[1])
                        if check.isnumeric():
                            self.list_wifi_pf.append("PASS")
                           
                        else:
                            self.list_wifi_pf.append("FAIL")
                           
                    elif item.startswith(' MAC address:'):
                        wifi_split = item.split(' MAC address:')
                        wifi_split[0]="MAC Address"
                        check = wifi_split[1].strip()
                        self.list_wifi_description.append(wifi_split[0])
                        self.list_wifi_val_ver.append(wifi_split[1])
                        if check!='':                                          
                            self.list_wifi_pf.append("PASS")
                           
                        else:
                            self.list_wifi_pf.append("FAIL")
                           
                    elif item.startswith("SIM ID"):
                        wifi_split = item.split(':')
                        check = wifi_split[1].strip().replace('.','')
                        self.list_wifi_description.append(wifi_split[0])
                        self.list_wifi_val_ver.append(wifi_split[1])
                        if check.isalnum() and int(check,16):
                            self.list_wifi_pf.append("PASS")
                           
                        else:
                            self.list_wifi_pf.append("FAIL")
                           
                    elif item.startswith("IMEI"):
                        wifi_split = item.split(':')
                        check = wifi_split[1].strip().replace('.','')
                        self.list_wifi_description.append(wifi_split[0])
                        self.list_wifi_val_ver.append(wifi_split[1])
                        if check.isnumeric() and int(check,16):
                            self.list_wifi_pf.append("PASS")
                           
                        else:
                            self.list_wifi_pf.append("FAIL")
                            
                    elif item.startswith("WIFI-BLE") or item.startswith('Ext. Flash'):
                        dummy_str = f'{item}'+':'
                        wifi_split = dummy_str.split(':')
                        self.list_wifi_description.append(wifi_split[0])
                        self.list_wifi_val_ver.append(wifi_split[1])
                        if "Success" in item:
                            self.list_wifi_pf.append("PASS")
                           
                        else:
                            self.list_wifi_pf.append("FAIL")
                            
                    elif item.startswith('Wifi BroadCast'):
                        if 'Wifi BroadCast PASS' in item:
                            self.list_wifi_description.append('WIFI Broad-Cast')
                            self.list_wifi_val_ver.append('')
                            self.list_wifi_pf.append("PASS")
                            
                        elif 'Wifi BroadCast FAIL' in item: 
                            self.list_wifi_description.append('WIFI Broad-Cast')
                            self.list_wifi_val_ver.append('')
                            self.list_wifi_pf.append("FAIL")
                           
                    elif item.startswith("1. SSID") or item.startswith("2. SSID"):
                        wifi_split = item.split(':')
                        check = wifi_split[1].replace(';','').strip()
                        print("=====>",check)
                        self.list_wifi_description.append(wifi_split[0])
                        self.list_wifi_val_ver.append(wifi_split[1])
                        if check  != '' :
                            self.list_wifi_pf.append("PASS")
                           
                        else:
                            self.list_wifi_pf.append("FAIL")
                          
                    elif item.startswith("BLE Boot Mode Enter") or item.startswith("BLE Boot Mode Exit"):
                        if len(self.Wifi_common_list[i])==2:
                            if 'PASS' in self.Wifi_common_list[i][1]:
                                self.list_wifi_description.append(self.Wifi_common_list[i][0])
                                self.list_wifi_val_ver.append('')
                                self.list_wifi_pf.append("PASS")
                               
                            else:
                                self.list_wifi_description.append(self.Wifi_common_list[i][0])
                                self.list_wifi_val_ver.append('')
                                self.list_wifi_pf.append("FAIL")
                               

################################################################# wifi resive data Parsing_Module end #######################################################################################################

################################################################# ble resive data Parsing_Module start ###########################################################################################################      
        
        if arg == 3:
            result_dict = {f'key_{i}': sublist for i, sublist in enumerate(self.ble_common_list)} # parsing
            print(result_dict)
            for i,x in result_dict.items():
                if i == 'key_0':
                    for item in x:
                        if item.startswith("HDREV"):
                            ble_split = item.split(':')
                            check = ble_split[1].strip().replace('.','')
                            self.list_ble_description.append(ble_split[0])
                            self.list_bl_val_ver.append(ble_split[1])
                            if check.isnumeric():
                                self.list_ble_pf.append("PASS")
                                
                            else:
                                self.list_ble_pf.append("FAIL")
                              
                        elif item.startswith("macId"):
                            ble_split = item.split('macId:')
                            ble_split[0]="MAC ID"
                            check = ble_split[1].strip().replace(':','')
                            self.list_ble_description.append(ble_split[0])
                            self.list_bl_val_ver.append(ble_split[1])
                            if check.isalnum() and int(check,16):
                                self.list_ble_pf.append("PASS")
                                
                            else:
                                self.list_ble_pf.append("FAIL")
                              

                        elif item.startswith("fwVer"):
                            ble_split = item.split(':')
                            check = ble_split[1].strip().replace('.','')
                            self.list_ble_description.append(ble_split[0])
                            self.list_bl_val_ver.append(ble_split[1])
                            if check.isnumeric():
                                self.list_ble_pf.append("PASS")
                               
                            else:
                                self.list_ble_pf.append("FAIL")
                               
                        elif item.startswith("MAX FG BATT"):
                            ble_split = item.split('MAX FG BATT - success')
                            ble_split[0]='MAX FG BATT - success'
                            check = ble_split[1].strip().replace('%','')
                            self.list_ble_description.append(ble_split[0])
                            self.list_bl_val_ver.append(ble_split[1])
                            if check.isnumeric() and int(check)>60:
                                self.list_ble_pf.append("PASS")
                               
                            else:
                                self.list_ble_pf.append("FAIL")
                               
                        elif item.startswith("Temp"):
                            ble_split = item.split(':')
                            check = ble_split[1].strip('\t').replace('.','')
                            self.list_ble_description.append(ble_split[0].strip())
                            self.list_bl_val_ver.append(ble_split[1].strip('\t'))
                            if check.isnumeric() and float(check)<550.0:   # temp 350.0 represents 35.00
                                self.list_ble_pf.append("PASS")
                               
                            else:
                                self.list_ble_pf.append("FAIL")
                              
                        elif item.startswith("Humidity"):
                            ble_split = item.split(':')
                            check = ble_split[1].strip('\t').replace('.','')
                            self.list_ble_description.append(ble_split[0].strip())
                            self.list_bl_val_ver.append(ble_split[1].strip('\t'))
                            if check.isnumeric():   
                                self.list_ble_pf.append("PASS")
                                
                            else:
                                self.list_ble_pf.append("FAIL")
                                
                        elif item.startswith("BLE-WIFI") or item.startswith("Ext. Flash") or item.startswith("RTC") or item.startswith("Common Test"):
                            dummy_str = f'{item}'+':'
                            ble_split = dummy_str.split(':')
                            self.list_ble_description.append(ble_split[0])
                            self.list_bl_val_ver.append(ble_split[1])
                            if "Failed" not in item and "FAIL" not in item:
                                self.list_ble_pf.append("PASS")
                               
                            else:
                                self.list_ble_pf.append("FAIL")
                                

                elif i == 'key_1':
                    if 'PASS' == x[0]:
                        print(x[0])
                        self.list_ble_description.append("Buzzer Test")
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('PASS')
                       
                    elif 'FAIL'in x[0]:
                        self.list_ble_description.append("Buzzer Test")
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('FAIL')
                        

                elif i == 'key_2' or i== 'key_3' or i =='key_4':
                    if i=='key_2':
                        const = 'SW1'
                        if 'SW1 Pressed'== x[0] and 'PASS' in x: #or 'SW2 Pressed'== x[0] or 'SW3 Pressed'== x[0] and 'PASS' in x:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('PASS')
                          
                        elif 'FAIL'== x[0] or '' in x:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('FAIL')
                           
                        else:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('FAIL')
                           
                    elif i == 'key_3':
                        const = 'SW2'
                        if 'SW2 Pressed'== x[0] and 'PASS' in x: #or 'SW2 Pressed'== x[0] or 'SW3 Pressed'== x[0] and 'PASS' in x:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('PASS')
                           
                        elif 'FAIL'== x[0] or '' in x:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('FAIL')
                           
                        else:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('FAIL')
                            

                    elif i == 'key_4':
                        const = 'SW3'
                        if 'SW3 Pressed'== x[0] and 'PASS' in x: #or 'SW2 Pressed'== x[0] or 'SW3 Pressed'== x[0] and 'PASS' in x:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('PASS')
                           
                        elif 'FAIL'== x[0] or '' in x:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('FAIL')
                           
                        else:
                            self.list_ble_description.append(f"{const} Pressed")
                            self.list_bl_val_ver.append('')
                            self.list_ble_pf.append('FAIL')
                            
                           
                elif i == 'key_5':
                    if 'PASS' == x[0]:
                        print(x[0])
                        self.list_ble_description.append("LCD_Screen Test")
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('PASS')
                        
                    elif 'FAIL'in x[0]:
                        self.list_ble_description.append("LCD_Screen Test")
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('FAIL')
                       
                
                elif i == 'key_6':
                    if 'PASS' == x[0]:
                        print(x[0])
                        self.list_ble_description.append("LCD_Backlight Test")
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('PASS')
                        
                    elif 'FAIL'in x[0]:
                        self.list_ble_description.append("LCD_Backlight Test")
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('FAIL')
                        
                
                elif i == 'key_7':
                    if 'PASS' == x[0]:
                        print(x[0])
                        self.list_ble_description.append("LEDs Green,Blue,Red Test")
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('PASS')
                       
                    elif 'FAIL'in x[0]:
                        self.list_ble_description.append("LEDs Green,Blue,Red Test")
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('FAIL')
                        

                elif i == 'key_8':
                    for item in x:
                        if item.startswith("C:"):
                            temp = item.split(':')
                            if 'PASS' in x:
                                temp[0]="Charge"
                                temp[1]=int(temp[1])
                                self.list_ble_description.append(temp[0])
                                self.list_bl_val_ver.append( temp[1])
                                self.list_ble_pf.append('PASS')
                               
                            else:
                                temp[0]="Charge"
                                temp[1]=int(temp[1])
                                self.list_ble_description.append(temp[0])
                                self.list_bl_val_ver.append( temp[1])
                                self.list_ble_pf.append('FAIL')
                                
                elif i == 'key_9':
                    if 'FAIL' in x[0]:
                        self.list_ble_description.append('BLE Scanning')
                        self.list_bl_val_ver.append('')
                        self.list_ble_pf.append('FAIL')
                       
                    else:
                        scannning_char = x[0].removesuffix('PASS')
                        unique_characters = scannning_char.split('0x')
                        self.list_ble_description.append('BLE Scanning')
                        self.list_bl_val_ver.append(f'0x{unique_characters[1]}')
                        self.list_ble_pf.append('PASS')
                        

################################################### ble resive data Parsing_Module end ####################################################################################################

########################################## temp wifi resive data Parsing_Module end ################################################################################

    def Out_Put_Report(self,output_list):
        count_pass = 0
        for x in output_list:
            if x == 'PASS':
                count_pass = count_pass+1
        return count_pass
        
############################################## lcd save data in excel sheet start  #######################################################################################################
    
    def Save_Data(self):

        print(self.list_wifi_description,self.list_wifi_val_ver,self.list_wifi_pf)

        date_time=datetime.datetime.now()
        self.End_time=date_time.strftime("%H:%M:%S")
        self.save_time=date_time.strftime("%H-%M-%S")
        list_A=["Employee No","Serial No"]

        list_B =[f'{self.Employee_name}',f'{self.Serial_name}']
        count_pass_volt = self.Out_Put_Report(self.list_volt_pf)
        count_pass_wifi = self.Out_Put_Report(self.list_wifi_pf)
        count_pass_ble =  self.Out_Put_Report(self.list_ble_pf)

        check_total = lambda x, y, z : 'PASS' if x+y+z == 40 else 'FAIL' 
        Result = check_total(count_pass_volt,count_pass_wifi,count_pass_ble)
        

        list_D = ['Date','Start_Time','End_Time','Result']
        list_E = [f'{self.datetime}',f'{self.Start_time}',f'{self.End_time}',f'{Result}']
        data1={}
        for i in range (len(list_A)):
            data1[list_A[i]]=[list_B[i]]
        A01=pd.DataFrame(data1)
        A01t=A01.transpose()

        data2={}
        for i in range (len(list_D)):
            data2[list_D[i]]=[list_E[i]]
        A02=pd.DataFrame(data2)
        A02t= A02.transpose()
        
        voltage_Description = {"Voltage REPORT":[" "]}
        df_volt_head = pd.DataFrame(voltage_Description)
        Data_volt_df={"Test points":self.list_volt_description,"Max and Min":self.list_volt_min_max,"Value":self.list_volt_val_ver,"Result":self.list_volt_pf}
        df_volt = pd.DataFrame(Data_volt_df)
        wifi_Description = {"WIFI-TEST REPORT":[" "]}
        df_wifi_head = pd.DataFrame(wifi_Description)
        Data_wifi_df={"Description":self.list_wifi_description,"Version/Value":self.list_wifi_val_ver,"Result":self.list_wifi_pf}
        df_wifi = pd.DataFrame(Data_wifi_df)
        ble_Description = {"BLUETOOTH-TEST REPORT":[" "]}
        df_ble_head = pd.DataFrame(ble_Description)
        Data_ble_df={"Description":self.list_ble_description,"Version/Value":self.list_bl_val_ver,"Result":self.list_ble_pf}
        df_ble = pd.DataFrame(Data_ble_df)
        
        volt_len = len(df_volt)+10
        wifi_len = len(df_wifi)+23

        excel_file_path = f'D:\\BSD_Finel_Data\\Aaviza_Exc\\Aaviza_V_0.01\\Aaviza_Save\\Board_Level_Save\\BSD_Save\\{self.Serial_name}_wifi_ble_data_{self.save_time}_Result_{Result}.xlsx'
        with pd.ExcelWriter(excel_file_path, engine='xlsxwriter') as writer:
            A01t.to_excel(writer, header=False, index=True, startrow=0, startcol=0, sheet_name='Sheet1')
            A02t.to_excel(writer, header=False, index=True, startrow=0, startcol=2, sheet_name='Sheet1')
            df_volt_head.to_excel(writer, sheet_name='Sheet1', index=False,startcol=1,startrow=6)
            df_volt.to_excel(writer, sheet_name='Sheet1', index=False,startcol=0,startrow=7)
            df_wifi_head.to_excel(writer, sheet_name='Sheet1', index=False,startcol=1,startrow=volt_len)
            df_wifi.to_excel(writer, sheet_name='Sheet1', index=False,startcol=0,startrow= volt_len+1)
            df_ble_head.to_excel(writer, sheet_name='Sheet1', index=False,startcol=1,startrow=wifi_len)
            df_ble.to_excel(writer, sheet_name='Sheet1', index=False, startrow=wifi_len+1,startcol=0)  # Start second DataFrame after a ga

        file_path = excel_file_path 

        workbook = openpyxl.load_workbook(file_path) 
        sheet = workbook['Sheet1']
        cell1=sheet['D4']
        cell_text1=cell1.value
        if 'FAIL' in cell_text1:
            fill = PatternFill(start_color='FA4E2E',end_color='FA4E2E', fill_type='solid')
            cell1.fill = fill
        elif 'PASS' in cell_text1:
            fill = PatternFill(start_color='00FF00',end_color='00FF00', fill_type='solid')
            cell1.fill = fill
        workbook.save(file_path) 

        workbook = openpyxl.load_workbook(file_path)
        sheet = workbook.active
        for i in range(0,4):
            column_index = i
            max_length = 0
            for cell in sheet[chr(65 + column_index)]:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except Exception as e:
                    print(f"Error: {e}")
                sheet.column_dimensions[chr(65 + column_index)].width = max_length + 2
                workbook.save(file_path)
        self.clear_array()

############################################ clear_array ############################################################################################################################
    
    def clear_array(self):       
        self.Wifi_common_list = []
        self.wifi_filtered_list = []
        self.list_wifi_description = []
        self.list_wifi_val_ver = []
        self.list_wifi_pf = []

        self.list_volt_description = []
        self.list_volt_val_ver = []
        self.list_volt_pf = []
        self.list_volt_min_max = []
        self.volt_common_list = []

        self.list_ble_description=[]
        self.list_bl_val_ver=[]
        self.list_ble_pf = []
        self.ble_common_list = []
        self.ble_filtered_list = []

############################################ disconnect_action ###################################################################################################################################################################
    
    def disconnect_action(self):
        
        try:
            self.ser.open()
            time.sleep(0.5)
            if self.disconnect_flag_BSD:
                self.wifi_run_flag = False
                self.ble_run_flag = False
                self.voltag_run_flag = False
                self.wifi_selected_case = 'exit'
                self.disconnect_flag_BSD = False
                self.ser.write("BSD00".encode('utf-8'))
        except SerialException:
            pass

        self.connect_button.configure(state=customtkinter.NORMAL)
        time.sleep(0.5)
        self.ser.close()

    def clear(self):
        try:
            if self.ser.is_open:
                print(f"Sending command volt: CLEAR")
                pin = "CLEAR"
                self.ser.write(f'{pin}'.encode('utf-8'))
                time.sleep(0.5)
                self.ser.close()
            else:
                try:
                    if self.ser_wifi.is_open:
                        time.sleep(0.2)
                        self.ser_wifi.close()
                    if self.ser_ble.is_open:
                        time.sleep(0.2)
                        self.ser_ble.close()   
                except:
                    pass
        except:
            pass
        self.MisMatch_WB_In_Comm()

    def MisMatch_WB_In_Comm(self):
        self.wifi_run_flag = False
        self.ble_run_flag = False
        self.voltag_run_flag = False
        self.wifi_selected_case = 'exit'
        self.clear_text()
        self.clear_array()

    def BSD_Time_Out(self):

        self.Time_out_POP_UP()
        self.wifi_run_flag = False
        self.ble_run_flag = False
        self.voltag_run_flag = False
        self.wifi_selected_case = 'exit'
        try:
            self.ser.close()
            self.ser_wifi.close()
            self.ser_ble.close()
        except:
            pass
        self.clear_text()
        self.clear_array()

    def clear_text(self):
        size  = self.textbox.size()
        print(size)
        self.textbox.delete('0.0','end') 
        self.start_button.configure(state=customtkinter.NORMAL)
        self.combobox_port1.configure(state = customtkinter.NORMAL)
        self.combobox_port2.configure(state = customtkinter.NORMAL)
        self.combobox_port3.configure(state = customtkinter.NORMAL)


    def Send_Command_th(self):
        ts = threading.Thread(target=self.Send_Command,daemon=False)  
        ts.start()

################################################### funtion end ###################################################################################################################################################################################

if __name__=="__main__":
    try:
        comm_port=Serial_Communication()
        comm_port.root.mainloop()
    except:
        pass

############################################################ END #############################################################################################################################################################
